name: nestjs
description: Example component that includes a Nest.js and a postgres database.
keywords:
  - architect
  - typescript
  - nest.js
  - postgres

# Add secrets to be used by different services. For more information:
# https://docs.architect.io/deployments/secrets/
secrets:
  db_user:
    description: Root user to assign to the component's database
    default: architect
  db_pass:
    description: Root password to assign to the component's database
    default: secret
  db_name:
    description: Name of the database the component will store content in
    default: api-db
  db_port:
    description: Port for the database
    default: 5432
  app_port:
    description: Port for app
    default: 3000

services:
  ### This service is the actual Nest.js component ###
  app:
    # Build context is the location of your application relative to the architect.yml file
    build:
      context: .
      args:
        NODE_ENV: production
    depends_on:
      - api-db
    interfaces:
      main:
        port: ${{ secrets.app_port }}
        ingress:
          subdomain: app
    # The liveness_probe makes sure the application is healthy - if not, it will re-start the application
    liveness_probe:
      command: curl --fail localhost:3000
      interval: 30s
    # Set environment variables for your application here
    environment:
      PORT: ${{ secrets.app_port }}
      PG_USER: ${{ secrets.db_user }}
      PG_PASSWORD: ${{ secrets.db_pass }}
      PG_DATABASE: ${{ secrets.db_name }}
      DB_HOST: ${{ services.api-db.interfaces.main.host }}
      DB_PORT: ${{ services.api-db.interfaces.main.port }}
    # Debug block is used to enable hot-reloading to make real-time changes to an
    #   application while running `architect dev`. For more info, see -
    #   https://docs.architect.io/components/local-configuration/#hot-reloading
    debug:
      command: npm run start:debug
      build:
        args:
          NODE_ENV: development
      # The debug liveness probe is configured to run more often with a higher failure_threshold
      # so that the app is recognized as healthy more quickly.
      liveness_probe:
        interval: 5s
        initial_delay: 5s
        failure_threshold: 30
      volumes:
        src:
          # The `WORKDIR` defined in the Dockerfile (/usr/src/app) + src
          mount_path: /usr/src/app/src
          # Path to source code relative to the architect.yml file
          host_path: ./src
        public:
          # The `WORKDIR` defined in the Dockerfile (/usr/src/app) + public
          mount_path: /usr/src/app/public
          # Path to public code relative to the architect.yml file
          host_path: ./public

  # Database service
  api-db:
    image: postgres:12
    interfaces:
      main:
        port: ${{ secrets.db_port }}
        protocol: postgresql
    liveness_probe:
      command: pg_isready -d ${{ secrets.db_name }} -U ${{ secrets.db_user }}
      interval: 10s
      failure_threshold: 3
    environment:
      POSTGRES_USER: ${{ secrets.db_user }}
      POSTGRES_PASSWORD: ${{ secrets.db_pass }}
      POSTGRES_DB: ${{ secrets.db_name }}
